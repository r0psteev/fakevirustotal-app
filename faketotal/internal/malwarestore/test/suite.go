package test

import (
	"github.com/google/uuid"
	"github.com/r0psteev/faketotal/internal/malwarestore"
	gc "gopkg.in/check.v1"
)

// A suite of tests that can be executed against
// any type that implements the MalwareStore interface.
type SuiteBase struct {
	store malwarestore.MalwareStore
}

func (s *SuiteBase) SetStore(store malwarestore.MalwareStore) {
	s.store = store
}

// TestInserSample
func (s *SuiteBase) TestInsertSample(c *gc.C) {
	// Create an example Sample
	sample := &malwarestore.MalwareSample{
		ID:   uuid.New().String(),
		Name: "Ransomware.Wannacry",
		Hash: "ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa",
		Tags: []string{"Wannacry", "wannacryptor", "ransomware"},
	}

	err := s.store.InsertSample(sample)
	c.Assert(err, gc.IsNil)
}

// TestFindSample
func (s *SuiteBase) TestFindSample(c *gc.C) {
	// Create an example Sample
	sample := &malwarestore.MalwareSample{
		ID:   uuid.New().String(),
		Name: "Ransomware.Wannacry",
		Hash: "ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa",
		Tags: []string{"Wannacry", "wannacryptor", "ransomware"},
	}

	err := s.store.InsertSample(sample)
	c.Assert(err, gc.IsNil)

	found, err := s.store.FindSample(sample.Hash)
	c.Assert(err, gc.IsNil)
	c.Assert(found, gc.DeepEquals, sample, gc.Commentf("Returned Wrong Sample"))
}
